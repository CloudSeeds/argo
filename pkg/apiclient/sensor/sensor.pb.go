// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pkg/apiclient/sensor/sensor.proto

package sensor

import (
	context "context"
	fmt "fmt"
	v1alpha1 "github.com/argoproj/argo-events/pkg/apis/sensor/v1alpha1"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	v11 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListSensorsRequest struct {
	Namespace            string          `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ListOptions          *v1.ListOptions `protobuf:"bytes,2,opt,name=listOptions,proto3" json:"listOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ListSensorsRequest) Reset()         { *m = ListSensorsRequest{} }
func (m *ListSensorsRequest) String() string { return proto.CompactTextString(m) }
func (*ListSensorsRequest) ProtoMessage()    {}
func (*ListSensorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ba963e1c6b5b55, []int{0}
}
func (m *ListSensorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListSensorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListSensorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListSensorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListSensorsRequest.Merge(m, src)
}
func (m *ListSensorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListSensorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListSensorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListSensorsRequest proto.InternalMessageInfo

func (m *ListSensorsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *ListSensorsRequest) GetListOptions() *v1.ListOptions {
	if m != nil {
		return m.ListOptions
	}
	return nil
}

type SensorsLogsRequest struct {
	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// optional
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// optional
	TriggerName          string             `protobuf:"bytes,3,opt,name=triggerName,proto3" json:"triggerName,omitempty"`
	PodLogOptions        *v11.PodLogOptions `protobuf:"bytes,4,opt,name=podLogOptions,proto3" json:"podLogOptions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *SensorsLogsRequest) Reset()         { *m = SensorsLogsRequest{} }
func (m *SensorsLogsRequest) String() string { return proto.CompactTextString(m) }
func (*SensorsLogsRequest) ProtoMessage()    {}
func (*SensorsLogsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ba963e1c6b5b55, []int{1}
}
func (m *SensorsLogsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensorsLogsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensorsLogsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensorsLogsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorsLogsRequest.Merge(m, src)
}
func (m *SensorsLogsRequest) XXX_Size() int {
	return m.Size()
}
func (m *SensorsLogsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorsLogsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SensorsLogsRequest proto.InternalMessageInfo

func (m *SensorsLogsRequest) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *SensorsLogsRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SensorsLogsRequest) GetTriggerName() string {
	if m != nil {
		return m.TriggerName
	}
	return ""
}

func (m *SensorsLogsRequest) GetPodLogOptions() *v11.PodLogOptions {
	if m != nil {
		return m.PodLogOptions
	}
	return nil
}

// structured log entry
type LogEntry struct {
	Namespace  string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	SensorName string `protobuf:"bytes,2,opt,name=sensorName,proto3" json:"sensorName,omitempty"`
	// optional
	TriggerName          string   `protobuf:"bytes,3,opt,name=triggerName,proto3" json:"triggerName,omitempty"`
	Level                string   `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	Time                 *v1.Time `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
	Msg                  string   `protobuf:"bytes,7,opt,name=msg,proto3" json:"msg,omitempty"`
	DependencyName       string   `protobuf:"bytes,8,opt,name=dependencyName,proto3" json:"dependencyName,omitempty"`
	EventContext         string   `protobuf:"bytes,9,opt,name=eventContext,proto3" json:"eventContext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ba963e1c6b5b55, []int{2}
}
func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return m.Size()
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *LogEntry) GetSensorName() string {
	if m != nil {
		return m.SensorName
	}
	return ""
}

func (m *LogEntry) GetTriggerName() string {
	if m != nil {
		return m.TriggerName
	}
	return ""
}

func (m *LogEntry) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *LogEntry) GetTime() *v1.Time {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *LogEntry) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *LogEntry) GetDependencyName() string {
	if m != nil {
		return m.DependencyName
	}
	return ""
}

func (m *LogEntry) GetEventContext() string {
	if m != nil {
		return m.EventContext
	}
	return ""
}

type SensorWatchEvent struct {
	Type                 string           `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Object               *v1alpha1.Sensor `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *SensorWatchEvent) Reset()         { *m = SensorWatchEvent{} }
func (m *SensorWatchEvent) String() string { return proto.CompactTextString(m) }
func (*SensorWatchEvent) ProtoMessage()    {}
func (*SensorWatchEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_78ba963e1c6b5b55, []int{3}
}
func (m *SensorWatchEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SensorWatchEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SensorWatchEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SensorWatchEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SensorWatchEvent.Merge(m, src)
}
func (m *SensorWatchEvent) XXX_Size() int {
	return m.Size()
}
func (m *SensorWatchEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_SensorWatchEvent.DiscardUnknown(m)
}

var xxx_messageInfo_SensorWatchEvent proto.InternalMessageInfo

func (m *SensorWatchEvent) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *SensorWatchEvent) GetObject() *v1alpha1.Sensor {
	if m != nil {
		return m.Object
	}
	return nil
}

func init() {
	proto.RegisterType((*ListSensorsRequest)(nil), "sensor.ListSensorsRequest")
	proto.RegisterType((*SensorsLogsRequest)(nil), "sensor.SensorsLogsRequest")
	proto.RegisterType((*LogEntry)(nil), "sensor.LogEntry")
	proto.RegisterType((*SensorWatchEvent)(nil), "sensor.SensorWatchEvent")
}

func init() { proto.RegisterFile("pkg/apiclient/sensor/sensor.proto", fileDescriptor_78ba963e1c6b5b55) }

var fileDescriptor_78ba963e1c6b5b55 = []byte{
	// 632 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6a, 0x14, 0x3f,
	0x14, 0x67, 0xfa, 0xb1, 0xff, 0x6e, 0xb6, 0xfd, 0x53, 0x82, 0x17, 0xc3, 0x5a, 0x97, 0x76, 0x14,
	0xad, 0x85, 0x26, 0xdd, 0xea, 0x85, 0x20, 0x88, 0xa8, 0x45, 0x2f, 0x96, 0x2a, 0x53, 0x41, 0xf1,
	0x46, 0xd2, 0xd9, 0x43, 0x76, 0xda, 0x99, 0x64, 0x4c, 0xd2, 0xc1, 0x45, 0x04, 0xf1, 0x46, 0xf0,
	0x56, 0xaf, 0x7d, 0x07, 0xdf, 0xc2, 0x4b, 0xc1, 0x17, 0x90, 0xe2, 0x83, 0x48, 0x32, 0xb3, 0x9d,
	0x59, 0x77, 0xa5, 0x0b, 0x5e, 0xe5, 0xe4, 0x7c, 0xfe, 0x4e, 0xce, 0xef, 0x04, 0x6d, 0x64, 0xc7,
	0x9c, 0xb2, 0x2c, 0x8e, 0x92, 0x18, 0x84, 0xa1, 0x1a, 0x84, 0x96, 0xaa, 0x3c, 0x48, 0xa6, 0xa4,
	0x91, 0xb8, 0x51, 0xdc, 0xda, 0x6b, 0x5c, 0x4a, 0x9e, 0x80, 0xf5, 0xa6, 0x4c, 0x08, 0x69, 0x98,
	0x89, 0xa5, 0xd0, 0x85, 0x57, 0xfb, 0xe6, 0xf1, 0x2d, 0x4d, 0x62, 0x69, 0xad, 0x29, 0x8b, 0x06,
	0xb1, 0x00, 0x35, 0xa4, 0x65, 0x72, 0x4d, 0x53, 0x30, 0x8c, 0xe6, 0x5d, 0xca, 0x41, 0x80, 0x62,
	0x06, 0xfa, 0x65, 0x54, 0x50, 0x45, 0xd1, 0x48, 0x2a, 0x98, 0xe6, 0xf3, 0x88, 0xc7, 0x66, 0x70,
	0x72, 0x48, 0x22, 0x99, 0x52, 0xa6, 0xb8, 0xcc, 0x94, 0x3c, 0x72, 0xc2, 0x36, 0xe4, 0x20, 0x8c,
	0xae, 0xaa, 0x94, 0xe8, 0xf3, 0x2e, 0x4b, 0xb2, 0x01, 0x9b, 0xc8, 0x14, 0x7c, 0xf0, 0x10, 0xee,
	0xc5, 0xda, 0x1c, 0x38, 0x3f, 0x1d, 0xc2, 0xab, 0x13, 0xd0, 0x06, 0xaf, 0xa1, 0xa6, 0x60, 0x29,
	0xe8, 0x8c, 0x45, 0xe0, 0x7b, 0xeb, 0xde, 0x66, 0x33, 0xac, 0x14, 0xf8, 0x00, 0xb5, 0x92, 0x58,
	0x9b, 0xc7, 0x99, 0xeb, 0xd6, 0x9f, 0x5b, 0xf7, 0x36, 0x5b, 0xbb, 0x5d, 0x52, 0x00, 0x27, 0xf5,
	0x76, 0x49, 0x76, 0xcc, 0xad, 0x42, 0x13, 0xdb, 0x2e, 0xc9, 0xbb, 0xa4, 0x57, 0x05, 0x86, 0xf5,
	0x2c, 0xc1, 0x57, 0x0f, 0xe1, 0x12, 0x45, 0x4f, 0xf2, 0x19, 0x91, 0x60, 0xb4, 0x60, 0x2f, 0x0e,
	0x42, 0x33, 0x74, 0x32, 0x5e, 0x47, 0x2d, 0xa3, 0x62, 0xce, 0x41, 0xed, 0x5b, 0xd3, 0xbc, 0x33,
	0xd5, 0x55, 0xf8, 0x21, 0x5a, 0xc9, 0x64, 0xbf, 0x27, 0xf9, 0xa8, 0x83, 0x05, 0xd7, 0xc1, 0x46,
	0xad, 0x03, 0x62, 0x9f, 0xde, 0xe2, 0x7d, 0x52, 0x77, 0x0c, 0xc7, 0xe3, 0x82, 0x2f, 0x73, 0x68,
	0xa9, 0x27, 0xf9, 0x9e, 0x30, 0x6a, 0x78, 0x0e, 0xd2, 0x0e, 0x42, 0xc5, 0x2c, 0xf6, 0x2b, 0xbc,
	0x35, 0xcd, 0x0c, 0xa8, 0x2f, 0xa0, 0xc5, 0x04, 0x72, 0x48, 0xfc, 0x45, 0x67, 0x2b, 0x2e, 0xf8,
	0x0e, 0x5a, 0x30, 0x71, 0x0a, 0x7e, 0xc3, 0xb5, 0xb0, 0x35, 0xdb, 0x10, 0x9e, 0xc6, 0x29, 0x84,
	0x2e, 0x0e, 0xaf, 0xa2, 0xf9, 0x54, 0x73, 0xff, 0x3f, 0x97, 0xd3, 0x8a, 0xf8, 0x2a, 0xfa, 0xbf,
	0x0f, 0x19, 0x88, 0x3e, 0x88, 0x68, 0xe8, 0xc0, 0x2c, 0x39, 0xe3, 0x1f, 0x5a, 0x1c, 0xa0, 0x65,
	0xc7, 0xb6, 0xfb, 0x52, 0x18, 0x78, 0x6d, 0xfc, 0xa6, 0xf3, 0x1a, 0xd3, 0x05, 0xef, 0x3c, 0xb4,
	0x5a, 0x0c, 0xf5, 0x19, 0x33, 0xd1, 0x60, 0xcf, 0xda, 0xec, 0xd0, 0xcc, 0x30, 0x1b, 0xbd, 0x91,
	0x93, 0xf1, 0x73, 0xd4, 0x90, 0x87, 0x47, 0x10, 0x99, 0x92, 0x4d, 0x77, 0x49, 0x45, 0x71, 0x32,
	0xa2, 0xb8, 0x13, 0x5e, 0x16, 0x14, 0xaf, 0x9a, 0x2a, 0x37, 0x73, 0x44, 0x71, 0x52, 0xd4, 0x0b,
	0xcb, 0x7c, 0xbb, 0x1f, 0xe7, 0xd1, 0x4a, 0xa1, 0x3a, 0x00, 0x95, 0xc7, 0x11, 0xe0, 0xcf, 0x1e,
	0x6a, 0xd5, 0x38, 0x8f, 0xdb, 0xa3, 0x14, 0x93, 0x8b, 0xd0, 0x7e, 0xf0, 0xaf, 0x38, 0x6c, 0xce,
	0xe0, 0xf2, 0xfb, 0x1f, 0xbf, 0x3e, 0xcd, 0x5d, 0xc2, 0x17, 0xdd, 0x56, 0xe7, 0xdd, 0x72, 0x2d,
	0x35, 0x7d, 0x73, 0x46, 0x90, 0xb7, 0x58, 0xa0, 0x56, 0x8d, 0xff, 0x15, 0xaa, 0xc9, 0xa5, 0x68,
	0xaf, 0x9e, 0x21, 0x2e, 0xc9, 0x17, 0x50, 0x57, 0xe1, 0x3a, 0xbe, 0x76, 0x56, 0xc1, 0x28, 0x60,
	0xe9, 0xb4, 0x42, 0x34, 0x91, 0x5c, 0xef, 0x78, 0x58, 0xa1, 0x65, 0x37, 0x94, 0x59, 0x9e, 0xc1,
	0x1f, 0x07, 0x53, 0x0d, 0x33, 0xd8, 0x72, 0x85, 0xaf, 0xe0, 0xe0, 0xfc, 0xc2, 0x3b, 0xde, 0xbd,
	0xdb, 0xdf, 0x4e, 0x3b, 0xde, 0xf7, 0xd3, 0x8e, 0xf7, 0xf3, 0xb4, 0xe3, 0xbd, 0xd8, 0xfe, 0xdb,
	0x37, 0x46, 0xa7, 0x7d, 0xc1, 0x87, 0x0d, 0xf7, 0x65, 0xdd, 0xf8, 0x1d, 0x00, 0x00, 0xff, 0xff,
	0xd8, 0x9f, 0x91, 0x1b, 0xa1, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SensorServiceClient is the client API for SensorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SensorServiceClient interface {
	ListSensors(ctx context.Context, in *ListSensorsRequest, opts ...grpc.CallOption) (*v1alpha1.SensorList, error)
	SensorsLogs(ctx context.Context, in *SensorsLogsRequest, opts ...grpc.CallOption) (SensorService_SensorsLogsClient, error)
	WatchSensors(ctx context.Context, in *ListSensorsRequest, opts ...grpc.CallOption) (SensorService_WatchSensorsClient, error)
}

type sensorServiceClient struct {
	cc *grpc.ClientConn
}

func NewSensorServiceClient(cc *grpc.ClientConn) SensorServiceClient {
	return &sensorServiceClient{cc}
}

func (c *sensorServiceClient) ListSensors(ctx context.Context, in *ListSensorsRequest, opts ...grpc.CallOption) (*v1alpha1.SensorList, error) {
	out := new(v1alpha1.SensorList)
	err := c.cc.Invoke(ctx, "/sensor.SensorService/ListSensors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sensorServiceClient) SensorsLogs(ctx context.Context, in *SensorsLogsRequest, opts ...grpc.CallOption) (SensorService_SensorsLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorService_serviceDesc.Streams[0], "/sensor.SensorService/SensorsLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceSensorsLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SensorService_SensorsLogsClient interface {
	Recv() (*LogEntry, error)
	grpc.ClientStream
}

type sensorServiceSensorsLogsClient struct {
	grpc.ClientStream
}

func (x *sensorServiceSensorsLogsClient) Recv() (*LogEntry, error) {
	m := new(LogEntry)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *sensorServiceClient) WatchSensors(ctx context.Context, in *ListSensorsRequest, opts ...grpc.CallOption) (SensorService_WatchSensorsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SensorService_serviceDesc.Streams[1], "/sensor.SensorService/WatchSensors", opts...)
	if err != nil {
		return nil, err
	}
	x := &sensorServiceWatchSensorsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SensorService_WatchSensorsClient interface {
	Recv() (*SensorWatchEvent, error)
	grpc.ClientStream
}

type sensorServiceWatchSensorsClient struct {
	grpc.ClientStream
}

func (x *sensorServiceWatchSensorsClient) Recv() (*SensorWatchEvent, error) {
	m := new(SensorWatchEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SensorServiceServer is the server API for SensorService service.
type SensorServiceServer interface {
	ListSensors(context.Context, *ListSensorsRequest) (*v1alpha1.SensorList, error)
	SensorsLogs(*SensorsLogsRequest, SensorService_SensorsLogsServer) error
	WatchSensors(*ListSensorsRequest, SensorService_WatchSensorsServer) error
}

// UnimplementedSensorServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSensorServiceServer struct {
}

func (*UnimplementedSensorServiceServer) ListSensors(ctx context.Context, req *ListSensorsRequest) (*v1alpha1.SensorList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSensors not implemented")
}
func (*UnimplementedSensorServiceServer) SensorsLogs(req *SensorsLogsRequest, srv SensorService_SensorsLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method SensorsLogs not implemented")
}
func (*UnimplementedSensorServiceServer) WatchSensors(req *ListSensorsRequest, srv SensorService_WatchSensorsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSensors not implemented")
}

func RegisterSensorServiceServer(s *grpc.Server, srv SensorServiceServer) {
	s.RegisterService(&_SensorService_serviceDesc, srv)
}

func _SensorService_ListSensors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSensorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SensorServiceServer).ListSensors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sensor.SensorService/ListSensors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SensorServiceServer).ListSensors(ctx, req.(*ListSensorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SensorService_SensorsLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SensorsLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServiceServer).SensorsLogs(m, &sensorServiceSensorsLogsServer{stream})
}

type SensorService_SensorsLogsServer interface {
	Send(*LogEntry) error
	grpc.ServerStream
}

type sensorServiceSensorsLogsServer struct {
	grpc.ServerStream
}

func (x *sensorServiceSensorsLogsServer) Send(m *LogEntry) error {
	return x.ServerStream.SendMsg(m)
}

func _SensorService_WatchSensors_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSensorsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SensorServiceServer).WatchSensors(m, &sensorServiceWatchSensorsServer{stream})
}

type SensorService_WatchSensorsServer interface {
	Send(*SensorWatchEvent) error
	grpc.ServerStream
}

type sensorServiceWatchSensorsServer struct {
	grpc.ServerStream
}

func (x *sensorServiceWatchSensorsServer) Send(m *SensorWatchEvent) error {
	return x.ServerStream.SendMsg(m)
}

var _SensorService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sensor.SensorService",
	HandlerType: (*SensorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSensors",
			Handler:    _SensorService_ListSensors_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SensorsLogs",
			Handler:       _SensorService_SensorsLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchSensors",
			Handler:       _SensorService_WatchSensors_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/apiclient/sensor/sensor.proto",
}

func (m *ListSensorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListSensorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListSensorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ListOptions != nil {
		{
			size, err := m.ListOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensorsLogsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensorsLogsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensorsLogsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PodLogOptions != nil {
		{
			size, err := m.PodLogOptions.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.TriggerName) > 0 {
		i -= len(m.TriggerName)
		copy(dAtA[i:], m.TriggerName)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.TriggerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LogEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LogEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LogEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.EventContext) > 0 {
		i -= len(m.EventContext)
		copy(dAtA[i:], m.EventContext)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.EventContext)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DependencyName) > 0 {
		i -= len(m.DependencyName)
		copy(dAtA[i:], m.DependencyName)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.DependencyName)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Time != nil {
		{
			size, err := m.Time.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TriggerName) > 0 {
		i -= len(m.TriggerName)
		copy(dAtA[i:], m.TriggerName)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.TriggerName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SensorName) > 0 {
		i -= len(m.SensorName)
		copy(dAtA[i:], m.SensorName)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.SensorName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Namespace) > 0 {
		i -= len(m.Namespace)
		copy(dAtA[i:], m.Namespace)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Namespace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SensorWatchEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SensorWatchEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SensorWatchEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Object != nil {
		{
			size, err := m.Object.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSensor(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintSensor(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSensor(dAtA []byte, offset int, v uint64) int {
	offset -= sovSensor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ListSensorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.ListOptions != nil {
		l = m.ListOptions.Size()
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SensorsLogsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.TriggerName)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.PodLogOptions != nil {
		l = m.PodLogOptions.Size()
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LogEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Namespace)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.SensorName)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.TriggerName)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.Time != nil {
		l = m.Time.Size()
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.DependencyName)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	l = len(m.EventContext)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SensorWatchEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.Object != nil {
		l = m.Object.Size()
		n += 1 + l + sovSensor(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSensor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSensor(x uint64) (n int) {
	return sovSensor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ListSensorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListSensorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListSensorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ListOptions == nil {
				m.ListOptions = &v1.ListOptions{}
			}
			if err := m.ListOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensorsLogsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensorsLogsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensorsLogsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PodLogOptions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PodLogOptions == nil {
				m.PodLogOptions = &v11.PodLogOptions{}
			}
			if err := m.PodLogOptions.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LogEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LogEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LogEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SensorName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SensorName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TriggerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TriggerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Time == nil {
				m.Time = &v1.Time{}
			}
			if err := m.Time.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DependencyName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DependencyName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SensorWatchEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SensorWatchEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SensorWatchEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Object", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSensor
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSensor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Object == nil {
				m.Object = &v1alpha1.Sensor{}
			}
			if err := m.Object.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSensor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSensor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSensor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSensor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSensor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSensor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSensor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSensor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSensor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSensor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSensor = fmt.Errorf("proto: unexpected end of group")
)
